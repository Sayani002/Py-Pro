# -*- coding: utf-8 -*-
"""Heart_DiseasePredSys.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDOtGS9Y3vgtQ82NZJvV6-CyOd6b1MFr

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing

"""

# loading the csv data to a Pandas DataFrame
df = pd.read_csv('/content/heart_disease_data.csv')

# print last 5 rows of the dataset
df.tail()

# print first 5 rows of the dataset
df.head()

from sklearn.preprocessing import LabelEncoder
df["sex"]=LabelEncoder().fit_transform(df["sex"])

df.head()

df["cp"]=LabelEncoder().fit_transform(df["cp"])
df["fbs"]=LabelEncoder().fit_transform(df["fbs"])
df["restecg"]=LabelEncoder().fit_transform(df["restecg"])
df["exang"]=LabelEncoder().fit_transform(df["exang"])
df["slope"]=LabelEncoder().fit_transform(df["slope"])
df["thal"]=LabelEncoder().fit_transform(df["thal"])
df["ca"]=LabelEncoder().fit_transform(df["ca"])

df.head()

df.ca.value_counts()

df.tail()

df.slope.value_counts()

df.fbs.value_counts()

df.restecg.value_counts()

# number of rows and columns in the dataset
df.shape

# getting some info about the data
df.info()

# checking for missing values
df.isnull().sum()

# statistical measures about the data
df.describe()

# checking the distribution of Target Variable
df['target'].value_counts()

"""1 ->Defective Heart
2 ->Healthy Heart

Splitting the features and num
"""

X = df.drop(columns='target' , axis=1)
Y = df['target']

print(X)

print(Y)

"""Splitting the Data into Training Data and Test Data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size = 0.2,stratify =Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on traininig data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data :' , training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data :' , test_data_accuracy)

"""Building a Predictive System

"""

input_data = (68,1,2,180,274,1,0,150,1,1.6,1,0,3)

# change the input data to a numpy array
input_data_as_numpy_array = np.array(input_data)

# reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')